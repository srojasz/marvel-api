{"version":3,"sources":["images/marvel-cabecera.jpg","images/no-results.jpg","services/fetchCharacters.js","components/Loader.js","components/Header.js","components/Filters.js","components/CharacterCard.js","components/CharactersList.js","components/CharacterDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","filterByComics","characters","min","max","filter","character","comics","available","name","undefined","apiUrl","fetchUrl","console","log","fetch","then","response","json","responseData","data","results","catch","error","Loader","Fragment","className","role","Header","src","logo","alt","Filters","props","onSubmit","ev","preventDefault","htmlFor","type","value","search","placeholder","onChange","target","handleSearch","handleComics","CharacterCard","id","img","comic","comicNumber","route","href","title","to","CharactersList","length","noresults","map","key","thumbnail","path","extension","collectionURI","CharacterDetail","App","state","isLoading","bind","renderCharacterDetail","this","setState","fetchCharacters","err","Number","POSITIVE_INFINITY","routeId","parseInt","match","params","selectedCharacter","find","exact","render","React","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.342aa989.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marvel-cabecera.77fd783f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/no-results.99262cff.jpg\";","// comics logic\n\nexport function filterByComics(characters, min, max) {\n  const result = characters.filter(character => {\n    return character.comics.available >= min && character.comics.available <= max\n  }\n  );\n  return result\n}\n\n// fetch with params\n\nexport default (name = undefined, min = undefined, max = undefined) => {\n\n  const apiUrl = 'https://gateway.marvel.com:443/v1/public/characters?ts=1&limit=100&apikey=4d46429eee763362f21b987f0e5f594a&hash=b9cc6de99e12cc463c64a0fee68e69bc';\n\n\n  const fetchUrl = name ? `${apiUrl}&nameStartsWith=${name}` : apiUrl;\n\n  console.log(apiUrl)\n  return fetch(fetchUrl)\n    .then(response => response.json())\n    .then(responseData => responseData.data.results)\n    .then(results => {\n      if (min !== undefined && max !== undefined) {\n        return filterByComics(results, min, max)\n      } else {\n        return results\n      }\n\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}","import React from 'react'\n\nconst Loader = () => {\n  return (\n    <React.Fragment>\n      <div\n        className=\"spinner-border text-info mb-3\"\n        role=\"status\">\n        <span\n          className=\"sr-only\">\n          Loading...\n      </span>\n      </div>\n      <h3 className=\"text-dark\">\n        Loading...\n    </h3>\n    </React.Fragment>\n\n  )\n}\n\n\nexport default Loader;","import React from 'react';\nimport logo from \"../images/marvel-cabecera.jpg\";\nimport \"../stylesheets/header.scss\"\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h2 className=\"header__title\">Marvel Finder</h2>\n      <img src={logo} alt=\"Imagen con todos los personajes de Marvel\" />\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport \"../stylesheets/filters.scss\";\n\nfunction Filters(props) {\n\n  function handleSubmit(ev) {\n    ev.preventDefault();\n  }\n\n  function handleSearch(ev) {\n    const search = ev.target.value;\n    props.handleSearch(search);\n  }\n\n  function handleComics(ev) {\n    const value = ev.target.value;\n    props.handleComics(value);\n  }\n\n  return (\n\n    <form\n      className=\"form\"\n      onSubmit={handleSubmit}\n    >\n      <label\n        className=\"form__label\" htmlFor=\"search\">\n        ¿Qué personaje buscas?\n        </label>\n      <input\n        className=\"form__input-text\"\n        type=\"text\"\n        name=\"search\"\n        value={props.search}\n        placeholder=\"Ej. Hulk\"\n        onChange={handleSearch} />\n      <h3 className=\"form__text\">\n        Busca por cómics protagonozados:\n      </h3>\n      <section className=\"form__checkbox\">\n\n        <select\n          onChange={handleComics}>\n          <option value=\"\">\n            Todos\n            </option>\n          <option value=\"-10\">\n            Menos de 10 cómics\n              </option>\n          <option value=\"11-20\">\n            Entre 11 y 20 cómics\n              </option>\n          <option value=\"+20\">\n            Más de 20 cómics\n              </option>\n\n        </select>\n\n      </section>\n\n    </form>\n\n\n  )\n}\n\nexport default Filters;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction CharacterCard(props) {\n\n  const { name, id, img, comic, comicNumber } = props;\n  const route = `/character/${id}`;\n\n  return (\n    <div className=\"card\">\n      <img\n        className=\"card__img\"\n        alt={`Imagen de ${name}`}\n        src={img} />\n      <p>{name}</p>\n      <p>Número de comics disponibles: {comicNumber}</p>\n      <a\n        href={comic}\n        title={`Pincha aquí para acceder a los comics disponibles de ${name}`}>\n        {`Descubre los comics de ${name}`}\n      </a>\n      <Link to={route}>\n        <button\n          title=\"Pincha aquí para conocer todos los detalles\">\n          Más información\n        </button>\n      </Link>\n\n    </div>\n  )\n}\n\n\n\n\nexport default CharacterCard;","import React from 'react';\nimport noresults from \"../images/no-results.jpg\";\nimport \"../stylesheets/list.scss\";\nimport CharacterCard from './CharacterCard';\n\nfunction CharactersList(props) {\n  if (props.characters.length === 0) {\n    return (\n      <section className=\"noresults\">\n        <p className=\"noresults__text\">Lo sentimos, no hemos encontrado lo que buscas. ¡Inténtalo otra vez!</p>\n        <img className=\"noresults__img\" alt=\"Imagen de Supermán llorando\"\n          src={noresults} />\n      </section>\n    )\n  } else {\n    return (\n      <React.Fragment>\n        <p>Hay {props.characters.length} que coinciden con tus criterios de búsqueda </p>\n\n        <section className=\"list\">\n\n          <ul className=\"list__list\">\n            {props.characters.map(character =>\n\n              < li className=\"list__item\"\n\n                key={character.id}>\n\n                <CharacterCard\n\n                  name={character.name}\n                  id={character.id}\n                  img={`${character.thumbnail.path}.${character.thumbnail.extension}`}\n                  comic={character.comics.collectionURI}\n                  comicNumber={character.comics.available}\n\n                />\n\n\n              </li>\n\n\n            )\n            }\n\n          </ul >\n        </section>\n      </React.Fragment>\n    )\n  }\n\n}\n\nexport default CharactersList;\n\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction CharacterDetail(props) {\n  console.log(props);\n\n  const { name, thumbnail, comics } = props.character;\n\n  return (\n    <aside>\n      <Link to=\"/\">\n        <button title=\"Volver al listado\">Volver atrás\n        </button>\n      </Link>\n      <img src={thumbnail.path + \".\" + thumbnail.extension} />\n      <h3>{name}</h3>\n      <p>Cómics: {comics.available}</p>\n    </aside>\n  )\n}\n\nexport default CharacterDetail;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport fetchCharacters from '../services/fetchCharacters';\nimport \"../stylesheets/app.scss\"\nimport Loader from \"./Loader\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport CharactersList from \"./CharactersList\";\nimport CharacterDetail from \"./CharacterDetail\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      search: \"\",\n      comics: \"\",\n      characters: []\n    }\n\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleComics = this.handleComics.bind(this);\n    this.renderCharacterDetail = this.renderCharacterDetail.bind(this);\n  }\n\n  // helpers\n\n  // filter by text\n\n  handleSearch(search) {\n    this.setState({\n      search,\n      isLoading: true,\n\n    })\n\n    fetchCharacters(search)\n      .then(characters => {\n        if (characters === undefined) {\n          this.setState({\n            isLoading: true,\n          })\n        } else {\n          this.setState({\n            isLoading: false,\n            characters,\n\n          })\n        }\n      })\n      .catch(err => {\n        console.error('my error', err)\n      })\n  }\n\n  // filter by comics\n\n  handleComics(value) {\n    const search = this.state.search;\n    let min;\n    let max;\n\n\n    this.setState({\n      comics: value\n    })\n\n    if (value === \"-10\") {\n      min = 0;\n      max = 10;\n    }\n    else if (value === \"11-20\") {\n      min = 11;\n      max = 20;\n    }\n    else if (value === \"+20\") {\n      min = 21;\n      max = Number.POSITIVE_INFINITY;\n    }\n    else {\n      min = undefined;\n      max = undefined;\n    }\n\n    fetchCharacters(search, min, max)\n      .then(characters => {\n        if (characters === undefined) {\n\n          this.setState({\n            isLoading: true\n\n          })\n        } else {\n\n          this.setState({\n\n            isLoading: false,\n            characters\n          })\n        }\n\n      })\n  }\n\n  // first fetch (no params)\n\n  componentDidMount() {\n    fetchCharacters().then(characters => {\n      if (characters === undefined) {\n        this.setState({\n          isLoading: true\n        })\n      } else {\n\n        this.setState({\n          isLoading: false,\n          characters\n        })\n      }\n    })\n  }\n\n  // rendering\n\n  renderCharacterDetail(props) {\n\n    const routeId = parseInt(props.match.params.id);\n\n    const selectedCharacter = this.state.characters\n      .find(character => character.id === routeId)\n    if (selectedCharacter === undefined) {\n      return <h4 >\n        Personaje no encontrado\n        </h4>\n    } else {\n\n      return (\n\n        < CharacterDetail character={selectedCharacter} />\n      );\n    }\n  }\n\n  render() {\n\n    console.log(this.state)\n\n    const isLoading = this.state.isLoading;\n\n    return isLoading\n      ? (\n        <div className=\"ml-5 mt-5\">\n          < Loader />\n        </div>)\n      : (\n        <div className=\"m-2 b-image\">\n          < Header\n          />\n\n\n          <Switch>\n            <Route exact path='/'>\n              <Filters\n                handleSearch={this.handleSearch}\n                search={this.state.search}\n                handleComics={this.handleComics} />\n              <CharactersList\n                characters={this.state.characters}\n              />\n            </Route>\n            <Route\n              path='/character/:id'\n              render={this.renderCharacterDetail} />\n\n          </Switch>\n        </div >\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}